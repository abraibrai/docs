{
    "extends": [
        "eslint:recommended",
        "next/core-web-vitals",
        "prettier"
    ],
    "plugins": [
        "prettier",
        "eslint-plugin-tsdoc",
        "unused-imports",
        "react-camel-case"
    ],
    "overrides": [
        {
            "files": ["*.ts", "*.tsx"],
            "extends": [
                "plugin:@typescript-eslint/recommended",
                "plugin:@typescript-eslint/eslint-recommended",
                "plugin:@typescript-eslint/recommended-requiring-type-checking"
            ],
            "rules": {
                "@typescript-eslint/no-explicit-any": ["off"],
                "@typescript-eslint/ban-types": [
                    "error",
                    {
                        "types": {
                            "object": {
                                "message": "Don\\'t use `object` as a type. The `object` type is currently hard to use ([see this issue](https://github.com/microsoft/TypeScript/issues/21732)). Use a more specific type or one of our custom `UnknownObj|Obj` types instead."
                            },
                            "{}": {
                                "message": "Using `{}` means non-nullish, not an object with no keys. Use EmptyObj for an object with no keys, UnknownObj for an object with unknown values, or define an actual interface instead"
                            },
                            "Object": {
                                "message": "Use Obj instead",
                                "fixWith": "Obj"
                            },
                            "Number": {
                                "message": "Use number instead",
                                "fixWith": "number"
                            },
                            "Boolean": {
                                "message": "Use boolean instead",
                                "fixWith": "boolean"
                            },
                            "String": {
                                "message": "Use string instead",
                                "fixWith": "string"
                            }
                        }
                    }
                ],
                "@typescript-eslint/array-type": [
                    "error",
                    {
                        "default": "array-simple"
                    }
                ],
                "@typescript-eslint/naming-convention": [
                    "error",
                    {
                        "selector": "default",
                        "format": ["camelCase"]
                    },
                    {
                        "selector": "import",
                        "format": ["camelCase", "PascalCase"],
                      },
                    {
                        "selector": ["enumMember", "typeLike"],
                        "format": ["PascalCase", "UPPER_CASE"]
                    },
                    {
                        "selector": [
                            "classProperty",
                            "objectLiteralProperty",
                            "typeProperty",
                            "classMethod",
                            "objectLiteralMethod",
                            "typeMethod",
                            "accessor",
                            "enumMember"
                        ],
                        "format": null,
                        "modifiers": ["requiresQuotes"]
                    },
                    {
                        "selector": "property",
                        "format": [
                            "camelCase",
                            "snake_case",
                            "UPPER_CASE",
                            "PascalCase"
                        ],
                        "leadingUnderscore": "allow"
                    },
                    {
                        "selector": "variable",
                        "leadingUnderscore": "allow",
                        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
                        "filter": {
                            "regex": "El$",
                            "match": false
                        }
                    },
                    {
                        "selector": "variable",
                        "format": ["camelCase", "PascalCase"],
                        "custom": {
                            "regex": "El$",
                            "match": true
                        }
                    },
                    {
                        "selector": "parameter",
                        "format": ["camelCase", "PascalCase"],
                        "leadingUnderscore": "allow"
                    },
                    {
                        "selector": "property",
                        "modifiers": ["private"],
                        "format": ["camelCase"],
                        "leadingUnderscore": "allow"
                    },
                    {
                        "selector": ["function", "method"],
                        "format": ["camelCase", "PascalCase"],
                        "leadingUnderscore": "allow"
                    }
                ],
                "@typescript-eslint/ban-ts-comment": ["off"],
                "@typescript-eslint/explicit-function-return-type": ["off"],
                "@typescript-eslint/explicit-module-boundary-types": ["off"],
                "@typescript-eslint/no-floating-promises": ["off"],
                "@typescript-eslint/no-unsafe-assignment": ["off"],
                "@typescript-eslint/no-unsafe-call": ["off"],
                "@typescript-eslint/no-unsafe-member-access": ["off"],
                "@typescript-eslint/no-unsafe-return": ["off"],
                "@typescript-eslint/restrict-plus-operands": ["off"],
                "@typescript-eslint/restrict-template-expressions": ["off"],
                "@typescript-eslint/unbound-method": ["off"],
                "@typescript-eslint/return-await": ["error", "in-try-catch"],
                "@typescript-eslint/no-unsafe-argument": ["off"],
                "@typescript-eslint/no-misused-promises": ["off"],
                "@typescript-eslint/no-non-null-assertion": ["off"],
                "@typescript-eslint/no-unused-vars": ["off"]
            },
            "parserOptions": {
                "project": ["./tsconfig.json"]
            }
        }
    ],
    "rules": {
        "prettier/prettier": ["error", {
            "tabWidth":4
        }],
        "tsdoc/syntax": "error",
        // TODO: Share with analytics/.eslintrc::TS_ES_RULES
        "quotes": ["error", "backtick"],
        "no-use-before-define": [
            "error",
            {
                "functions": false,
                "classes": false
            }
        ],
        "import/no-duplicates": ["error", { "considerQueryString": true }],
        "no-unused-vars": [
            "error",
            { "argsIgnorePattern": "^_", "ignoreRestSiblings": true }
        ],
        "unused-imports/no-unused-imports": "error",
        // TODO: Share with analytics/.eslintrc::TSX_RULES
        "react/self-closing-comp": ["error"],
        // TODO: Share with analytics/.eslintrc::TYPESCRIPT_OVERRIDE
        "camelcase": ["off"],
        "react-hooks/exhaustive-deps": ["error"],
        "react-camel-case/react-camel-case": ["error"]
    },
    "root": true
}
